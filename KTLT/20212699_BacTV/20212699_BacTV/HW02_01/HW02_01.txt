/*Bài 1a: Fibonaci
    Chuong trình g?m 2 function: enterN nh?p n và display d? in ra màn hình dãy Fibonaci
    1b: vi?t hàm bit_overflow_check d? ki?m tra xem dãy có tràn không, n?u tràn thì in ra thông báo, n?u không thì hi?n th? dãy
    1.c add và Advanced_fib dùng cho câu c
*/
#include <stdio.h>
#include <stdlib.h>
#define MAX_SIZE 40

void enterN(int *n); // get number n from user and if n is integer
void  bit_overflow_check(int *sum); // check overflow function for mode 1 (print serials Fibonacci) 
void display(int *n); // print the serial of Fibonacci from 0th to n-1th (start from 0)
void add(int num1[MAX_SIZE], int num2[MAX_SIZE], int result[MAX_SIZE]); // add function for Advanced_Fib, use to array add
void Advanced_Fib(int *n); //print the Fibonacci user want
int Advanced_Fib_check(int* result, int* carry); // check if advanced fib overflow

int main() {
    int n,chose = 0;
    enterN(&n);
       
    printf("Which mode do you want to print: Series (cann't print big number,Enter 1) \nor Number (can print big number, maximum is 80, enter 2): ");
    scanf("%d", &chose);
    if(chose == 1){    
    display(&n);
    } else if(chose == 2) {
    Advanced_Fib(&n);
    }
    else{
        while(chose !=1 && chose !=2) {
            printf("retype your chose (1 or 2)");
            scanf("%d", chose);
        }
    } 

    return 0;
}


void enterN(int *n) {
    int c;
    printf("\nEnter your number: ");

    while (scanf("%d", n) != 1 || *n < 0) {
        printf("\nInvalid input, please retype: ");
        while ((c = getchar()) != '\n' && c != EOF);
    }
}

void display(int *n) 
{
    int sum_next;
    int number1 = 0;
    int number2 = 1;

    bit_overflow_check(n);

        printf("\nTh? t?        Giá tr?");
    
        for (int i = 0; i <= *n; i++) {
            printf("\n%-9d  -   %d", i, number1);
            sum_next = number1 + number2;
            number1 = number2;
            number2 = sum_next;
            
        }
}  


void bit_overflow_check(int *n) {
    int sum_next;
    int number1 = 0;
    int number2 = 1;

     for (int i = 1; i <= *n; i++) {
        
        if(number1 < 0) {
                printf("The sequence has overflowed");
            
            }    
            sum_next = number1 + number2;
            number1 = number2;
            number2 = sum_next;
            
        }

}
void add(int num1[MAX_SIZE], int num2[MAX_SIZE], int result[MAX_SIZE]){
    int carry = 0;
    for(int i = 0; i < MAX_SIZE; i++) {
        result[i] = (num1[i] + num2[i] + carry) % 10;
        carry = (num1[i] + num2[i] + carry) > 9? 1 : 0;    
    }
    if(Advanced_Fib_check((result+MAX_SIZE-1),&carry)) {
        exit(0);
    }

}
void Advanced_Fib(int *n) {
    int num1[MAX_SIZE] = {0}, num2[MAX_SIZE] = {1}, result[MAX_SIZE] = {0};

    for(int i = 1; i < *n; i++) {
        add(num1, num2, result);
        for(int j = 0; j < MAX_SIZE; j++) {
            num1[j] = num2[j];
            num2[j] = result[j]; 
        }

    }
    printf("Fib(%d) = ", *n);
    int  count = 0;
    for(int i = MAX_SIZE - 1; i >=0 ; i--) {
       if(result[i] == 0 && result[i-1] != 0) {
        count = i-1;
        break;
       }
    }
    for(int i = count; i >=0; i--) {
        printf("%d", result[i]);
    }

}
int Advanced_Fib_check(int *result, int *carry) 
{
    if((*result != 0) && (*carry == 1)) {
        printf("The value has overflowed");
        return 1;
    }
}
